























































































































from __future__ import print_function
def calc_similarity_complex(particle_image, projection_ctf_applied_2d):
	"""
	Calculates the similarty based of fourier shell correlation
	:param particle_image: Experimental 2D particle image
	:param projection_ctf_applied_2d: CTF filtered 2D Projection
	:return: fourier shell correlation
	"""
	fsc = sp_statistics.fsc(particle_image, projection_ctf_applied_2d)
	data = numpy.array(fsc[1])
	return numpy.average(data[2:50])


















































































































































































def add_proj_error(particle_projection_params, index, error):
	"""
	Just for testing purposes. Introduces errors to meridien parameters
	:param particle_projection_params:
	:param index:
	:param error:
	:return:
	"""

	new = particle_projection_params[index] + numpy.random.random() * error
	if index in (0, 2):
		if new < 0:
			new = 0
		elif new > 360:
			new = 360
	elif index == 1:
		if new < 0:
			new = 0
		elif new > 180:
			new = 180

	return new

















































































































































def print_progress(refinement_result):
	"""
	Prints the progress of the refinement
	:param refinement_result: Object of the asynchronos pool.map
	:return: None
	"""
	start_num_chunks = refinement_result._number_left
	chunks_in_progress = start_num_chunks

	with tqdm.tqdm(total=start_num_chunks, file=sys.stdout) as pbar:
		while True:
			num_unprocessed_chunks = refinement_result._number_left
			chunks_done = chunks_in_progress - num_unprocessed_chunks
			if chunks_done != 0:
				chunks_in_progress = num_unprocessed_chunks
				pbar.update(chunks_done)
			time.time.sleep(0.5)

			if num_unprocessed_chunks == 0:
				break

















































































































































































































































































































































































































































